.. contents::

.. image:: https://travis-ci.org/plone/plone.recipe.codeanalysis.png?branch=master
    :target: http://travis-ci.org/plone/plone.recipe.codeanalysis

.. image:: https://coveralls.io/repos/plone/plone.recipe.codeanalysis/badge.png?branch=master
    :target: https://coveralls.io/r/plone/plone.recipe.codeanalysis

.. image:: https://pypip.in/d/plone.recipe.codeanalysis/badge.png
        :target: https://crate.io/packages/plone.recipe.codeanalysis

.. image:: https://pypip.in/v/plone.recipe.codeanalysis/badge.png
        :target: https://crate.io/packages/plone.recipe.codeanalysis


Introduction
============

``plone.recipe.codeanalysis`` provides static code analysis for Buildout-based
Python projects, including `flake8`_, `JSHint`_, `CSS Lint`_, and
other code checks.

This buildout recipe creates a script to run the code analysis::

    bin/code-analysis

By default ``plone.recipe.codeanalysis`` also creates a git pre-commit hook, in
order to run the code analysis automatically before each commit.

``plone.recipe.codeanalysis`` comes with a Jenkins integration, that allows to use
the same code analysis settings on your local machine as well as on Jenkins.


Installation
============

Just add a code-analysis section to your buildout.cfg::

    [buildout]
    parts += code-analysis

    [code-analysis]
    recipe = plone.recipe.codeanalysis
    directory = ${buildout:directory}/src

The directory option is not required. Though, if you don't specify a directory
the code analysis will check every file in your buildout directory.


Jenkins Installation
====================

plone.recipe.codeanalysis provides a Jenkins setting that allows to run it on a Jenkins CI server and to process and integrate the output via the
`Jenkins Violations plugin`_.

Usually you don't want the recipe to create Jenkins output files on your
local machine. Therefore it makes sense to enable the Jenkins output only
on the CI machine. To do so, just create a jenkins.cfg that extends and
overrides the default buildout file (that includes the other settings)::

    [buildout]
    parts += code-analysis

    [code-analysis]
    recipe = plone.recipe.codeanalysis
    jenkins = True

The Jenkins job itself should run "bin/code-analysis"::

    python bootstrap.py -c jenkins.cfg
    bin/buildout -c jenkins.cfg
    bin/jenkins-test --all
    bin/code-analysis

The `Jenkins Violations plugin`_ needs to be configured to read the output
files generated by this configuration.

pep8 (to read the flake8 output)::

    **/parts/code-analysis/flake8.log

csslint::

    **/parts/code-analysis/csslint.xml

jslint (to read the jshint output::

    **/parts/code-analysis/jshint.xml

Filesystem output
=================

If jenkins is set to False, you can still store the output on the filesystem by setting flake8-filesystem=True.
This is ignored if jenkins is set to True.

output::

    **/parts/code-analysis/flake8.txt

Links
=====

Code repository:

    https://github.com/plone/plone.recipe.codeanalysis

Continuous Integration:

    https://travis-ci.org/plone/plone.recipe.codeanalysis

Issue Tracker:

    https://github.com/plone/plone.recipe.codeanalysis/issues


Supported options
=================

The recipe supports the following options:

**directory**
    Directory that is subject to the code analysis.

**pre-commit-hook**
    If set to True, a git pre-commit hook is installed that runs the code
    analysis before each commit. Default is ``True``.

**jenkins**
    If set to True, the flake8, jshint and csslint code analysis steps will
    write output files that can be processed by the
    `Jenkins Violations plugin`_. Default is ``False``.

**flake8-filesystem**
    If set to True, the flake8 code analysis step will
    write an output file. Ignored if jenkins is True. Default is ``False``.

**flake8**
    If set to True, run Flake8 code analysis. Default is ``True``.

**flake8-ignore**
    Skip errors or warnings. See `Flake8 documentation`_ for error codes.
    Default is none.

**flake8-exclude**
    Comma-separated filename and glob patterns default. Say you want to
    exclude bootstrap.py, setup.py and all collective.* and plone.* packages.
    Just set "flake8-exclude=bootstrap.py,docs,*.egg,setup.py,collective.*,
    plone.*" in your buildout configuration. Default is
    ``bootstrap.py,bootstrap-buildout.py,docs,*.egg``.

**flake8-max-complexity**
    McCabe complexity threshold. Default is ``10``.

**flake8-max-line-length**
    Set maximum allowed line length. Default is ``79``.

**jshint**
    If set to True, jshint code analysis is run. Default is ``False``. Note
    that plone.recipe.codeanalysis requires jshint >= 1.0.

**jshint-bin**
    JSHint executable. Default is ``jshint``. If you have JSHint installed on
    your system and in your path, there is nothing to do. To install JSHint in
    your buildout, use the following::

        [jshint]
        recipe = gp.recipe.node
        npms = jshint
        scripts = jshint

    set jshint-bin to '${buildout:directory}/bin/jshint'.

**jshint-exclude**
    Allows you to specify directories which you don't want to be linted.
    Default is none. If you want JSHint to skip some files you can list them
    in a file named ``.jshintignore``. See `JSHint documentation`_ for more
    details.

**jscs**
    If set to True, jscs code analysis is run. Default is ``False``.

    JavaScript Code Style options should be configured using a ``.jscs.json``
    file. You should align your javascript code to the next generation of
    Plone's javascript framework Mockup_ and take it's ``.jscs.json`` file
    which is available here:
    https://github.com/plone/mockup/blob/master/mockup/.jscs.json

    All configuration options are documented on the `jscs website`_.

**jscs-bin**
    Set the path to a custom version of JSCS, e.g.
    "/usr/local/bin/jscs".

    If you have Javascript Code Style Checker installed in your system and
    path, you have nothing to do. To install with Buildout, add the following
    section to your buildout and set jscs-bin to
    ``{buildout:bin-directory}/jscs``::

        [jscs]
        recipe = gp.recipe.node
        npms = jscs
        scripts = jscs

**jscs-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none. Note that these directories have to be given in
    absolute paths, use ``${buildout:directory}/foo/bar/static/js-3rd-party``
    for example.

**csslint**
    If set to True, CSS Lint code analysis is run. Default is ``False``.

    CSS Lint options should be configured using a ``.csslintrc`` file. A
    typical ``.csslintrc`` file will look like this::

        --format=compact
        --quiet
        --ignore=adjoining-classes,floats,font-faces,font-sizes,ids,qualified-headings,unique-headings
        --exclude-list=foo/bar/static/third-party.css

    This typical configuration includes a list of CSS rules that will be
    ignored as they are `considered useless`_.

    See `CSS Lint documentation`_ for a detailed list and description of the
    rules.

**csslint-bin**
    Set the path to a custom version of CSS Lint, e.g.
    "/usr/local/bin/csslint".

    If you have CSS Lint installed in your system and path, you have nothing
    to do. To install CSS Lint with Buildout, add the following section to
    your buildout and set csslint-bin to
    ``{buildout:bin-directory}/csslint``::

        [csslint]
        recipe = gp.recipe.node
        npms = csslint
        scripts = csslint

**deprecated-aliases**
    For historical reasons, some of the unittest.TestCase methods had one or
    more aliases that are deprecated on Python 2.7. If this option is set to
    True, warnings about deprecated aliases will be printed. Default is
    ``False``. See `Unit testing framework documentation`_ for more
    information.

**deprecated-aliases-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**utf8-header**
    If set to True, Python files without a utf-8 header (like
    ``# -*- coding: utf-8 -*-``) will cause a warning. Default is ``False``.

**utf8-header-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**clean-lines**
    If set to True, **any file** containing trailing spaces or tabs anywhere
    on the lines will cause a warning. Default is ``False``.

**clean-lines-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**prefer-single-quotes**
    If set to True, Python files will be scanned searching for strings quoted
    with double quote signs (``"``). Default is ``False``.

**prefer-single-quotes-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**pep3101**
    If set to True, Python files will be scanned in search of existing '%'
    string formatting operators. Default is ``False``. See `PEP 3101 (Advanced
    String Formatting)`_ for more information.

**pep3101-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**imports**
    If set to True, checks that imports in Python files follow `plone.api
    conventions`_. This also includes checking for alphabetically sorted
    import statements. Default is ``False``.

**imports-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**debug-statements**
    If set to True, scan Python files looking for debug-like statements.
    Default is ``False``.

**debug-statements-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**hasattr**
    If set to True, scan Python files looking for ``hasattr`` calls.
    This is considered bad practice as it swallows exceptions.
    Use ``getattr(obj, attribute, None)`` always.
    Default is ``False``.

**hasattr-exclude**
    Allows you to specify directories and/or files which you don't want to be
    checked. Default is none.

**return-status-codes**
    If set to True, the ``bin/code-analysis`` script returns an error code
    that Continuous Integration servers (like Travis CI) can use to fail or
    pass a job, based on the code analyis output. Note that Jenkins usually
    does not need this option (this is better handled by the Jenkins
    Violations plugin). Note that this option does not have any effect on the
    other code analysis scripts. Default is ``False``.

i18ndude and zptlint support
----------------------------

To reduce the number of Zope/Plone direct dependencies, plone.recipe.codeanalysis no longer depends on `i18ndude`_ nor `zptlint`_;
in order to use the following options you have to install them on your
system:

**find-untranslated**
    If set to True, scan Zope templates to find untranslated strings.
    Default is ``False``.
    To use this you will need to set the ``i18ndude-bin`` option.

**i18ndude-bin**
    Set the path to a custom version of `i18ndude`_.
    Default is none.

**zptlint**
    If set to True, zptlint code analysis is run.
    Default is ``False``.
    To use this you will need to set the ``zptlint-bin`` option.

**zptlint-bin**
    Set the path to a custom version of `zptlint`_.
    Default is none.


Known Issues
============

JSHint "ERROR: Unknown option --verbose"::

    JSHint                [ OK ]
    ERROR: Unknown option --verbose

Upgrade JSHint to latest version (>= 1.0) to fix this issue, e.g.::

    $ sudo npm install -g jshint


JSHint "ERROR: Unknown option --exclude"::

    JSHint                [ OK ]
    ERROR: Unknown option --exclude

Upgrade JSHint to latest version (>= 2.1.6) to fix this issue, e.g.::

    $ sudo npm install -g jshint


.. _`considered useless`: http://2002-2012.mattwilcox.net/archive/entry/id/1054/
.. _`CSS Lint documentation`: https://github.com/stubbornella/csslint/wiki/Rules
.. _`CSS Lint`: http://csslint.net/
.. _`Flake8 documentation`: http://flake8.readthedocs.org/en/latest/warnings.html#error-codes
.. _`Jenkins Violations plugin`: https://wiki.jenkins-ci.org/display/JENKINS/Violations
.. _`flake8`: https://pypi.python.org/pypi/flake8
.. _`JSHint documentation`: http://jshint.com/docs/
.. _`JSHint`: http://www.jshint.com/
.. _`PEP 3101 (Advanced String Formatting)`: http://www.python.org/dev/peps/pep-3101/
.. _`plone.api conventions`: http://ploneapi.readthedocs.org/en/latest/contribute/conventions.html#about-imports
.. _`zptlint`: https://pypi.python.org/pypi/zptlint
.. _`i18ndude`: https://pypi.python.org/pypi/i18ndude
.. _`Unit testing framework documentation`: http://docs.python.org/2/library/unittest.html#deprecated-aliases
.. _`Mockup`: https://github.com/plone/mockup
.. _`jscs website`: https://www.npmjs.org/package/jscs

